b'\n    \n    tkinter \xc3\xa2\xc2\x80\xc2\x94 Python interface to Tcl/Tk \xe2\x80\x94 Python 3.8.1 documentation\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n      \n      \n      \n    \n\n    \n    \n      @media only screen {\n        table.full-width-table {\n            width: 100%;\n        }\n      }\n    \n\n    \n    \n    \n    \n     \n\n\n  \n  \n    \n      Navigation\n      \n        \n          index\n        \n          modules |\n        \n          next |\n        \n          previous |\n\n    \n    Python \xc2\xbb\n    \n\n    \n      en\n      3.8.1\n      Documentation  \xc2\xbb\n    \n\n          The Python Standard Library \xc2\xbb\n          Graphical User Interfaces with Tk \xc2\xbb\n    \n        \n\n    \n        \n          \n          \n          \n          \n        \n    \n    \n         |\n    \n\n      \n        \n\n    \n      \n        \n          \n            \n  \ntkinter \xc3\xa2\xc2\x80\xc2\x94 Python interface to Tcl/Tk\xc3\x82\xc2\xb6\nSource code: Lib/tkinter/__init__.py\n\nThe tkinter package (\xc3\xa2\xc2\x80\xc2\x9cTk interface\xc3\xa2\xc2\x80\xc2\x9d) is the standard Python interface to\nthe Tk GUI toolkit.  Both Tk and tkinter are available on most Unix\nplatforms, as well as on Windows systems.  (Tk itself is not part of Python; it\nis maintained at ActiveState.)\nRunning python -m tkinter from the command line should open a window\ndemonstrating a simple Tk interface, letting you know that tkinter is\nproperly installed on your system, and also showing what version of Tcl/Tk is\ninstalled, so you can read the Tcl/Tk documentation specific to that version.\n\nSee also\nTkinter documentation:\n\nPython Tkinter ResourcesThe Python Tkinter Topic Guide provides a great deal of information on using Tk\nfrom Python and links to other sources of information on Tk.\n\nTKDocsExtensive tutorial plus friendlier widget pages for some of the widgets.\n\nTkinter 8.5 reference: a GUI for PythonOn-line reference material.\n\nTkinter docs from effbotOnline reference for tkinter supported by effbot.org.\n\nProgramming PythonBook by Mark Lutz, has excellent coverage of Tkinter.\n\nModern Tkinter for Busy Python DevelopersBook by Mark Roseman about building attractive and modern graphical user interfaces with Python and Tkinter.\n\nPython and Tkinter ProgrammingBook by John Grayson (ISBN 1-884777-81-3).\n\n\nTcl/Tk documentation:\n\nTk commandsMost commands are available as tkinter or tkinter.ttk classes.\nChange \xc3\xa2\xc2\x80\xc2\x988.6\xc3\xa2\xc2\x80\xc2\x99 to match the version of your Tcl/Tk installation.\n\nTcl/Tk recent man pagesRecent Tcl/Tk manuals on www.tcl.tk.\n\nActiveState Tcl Home PageThe Tk/Tcl development is largely taking place at ActiveState.\n\nTcl and the Tk ToolkitBook by John Ousterhout, the inventor of Tcl.\n\nPractical Programming in Tcl and TkBrent Welch\xc3\xa2\xc2\x80\xc2\x99s encyclopedic book.\n\n\n\n\nTkinter Modules\xc3\x82\xc2\xb6\nMost of the time, tkinter is all you really need, but a number of\nadditional modules are available as well.  The Tk interface is located in a\nbinary module named _tkinter. This module contains the low-level\ninterface to Tk, and should never be used directly by application programmers.\nIt is usually a shared library (or DLL), but might in some cases be statically\nlinked with the Python interpreter.\nIn addition to the Tk interface module, tkinter includes a number of\nPython modules, tkinter.constants being one of the most important.\nImporting tkinter will automatically import tkinter.constants,\nso, usually, to use Tkinter all you need is a simple import statement:\nimport tkinter\n\n\nOr, more often:\nfrom tkinter import *\n\n\n\n\nclass tkinter.Tk(screenName=None, baseName=None, className=\'Tk\', useTk=1)\xc3\x82\xc2\xb6\nThe Tk class is instantiated without arguments. This creates a toplevel\nwidget of Tk which usually is the main window of an application. Each instance\nhas its own associated Tcl interpreter.\n\n\n\n\ntkinter.Tcl(screenName=None, baseName=None, className=\'Tk\', useTk=0)\xc3\x82\xc2\xb6\nThe Tcl() function is a factory function which creates an object much like\nthat created by the Tk class, except that it does not initialize the Tk\nsubsystem.  This is most often useful when driving the Tcl interpreter in an\nenvironment where one doesn\xc3\xa2\xc2\x80\xc2\x99t want to create extraneous toplevel windows, or\nwhere one cannot (such as Unix/Linux systems without an X server).  An object\ncreated by the Tcl() object can have a Toplevel window created (and the Tk\nsubsystem initialized) by calling its loadtk() method.\n\n\nOther modules that provide Tk support include:\n\ntkinter.scrolledtextText widget with a vertical scroll bar built in.\n\ntkinter.colorchooserDialog to let the user choose a color.\n\ntkinter.commondialogBase class for the dialogs defined in the other modules listed here.\n\ntkinter.filedialogCommon dialogs to allow the user to specify a file to open or save.\n\ntkinter.fontUtilities to help work with fonts.\n\ntkinter.messageboxAccess to standard Tk dialog boxes.\n\ntkinter.simpledialogBasic dialogs and convenience functions.\n\ntkinter.dndDrag-and-drop support for tkinter. This is experimental and should\nbecome deprecated when it is replaced  with the Tk DND.\n\nturtleTurtle graphics in a Tk window.\n\n\n\n\nTkinter Life Preserver\xc3\x82\xc2\xb6\nThis section is not designed to be an exhaustive tutorial on either Tk or\nTkinter.  Rather, it is intended as a stop gap, providing some introductory\norientation on the system.\nCredits:\n\nTk was written by John Ousterhout while at Berkeley.\nTkinter was written by Steen Lumholt and Guido van Rossum.\nThis Life Preserver was written by Matt Conway at the University of Virginia.\nThe HTML rendering, and some liberal editing, was produced from a FrameMaker\nversion by Ken Manheimer.\nFredrik Lundh elaborated and revised the class interface descriptions, to get\nthem current with Tk 4.2.\nMike Clarkson converted the documentation to LaTeX, and compiled the  User\nInterface chapter of the reference manual.\n\n\nHow To Use This Section\xc3\x82\xc2\xb6\nThis section is designed in two parts: the first half (roughly) covers\nbackground material, while the second half can be taken to the keyboard as a\nhandy reference.\nWhen trying to answer questions of the form \xc3\xa2\xc2\x80\xc2\x9chow do I do blah\xc3\xa2\xc2\x80\xc2\x9d, it is often best\nto find out how to do \xc3\xa2\xc2\x80\xc2\x9cblah\xc3\xa2\xc2\x80\xc2\x9d in straight Tk, and then convert this back into the\ncorresponding tkinter call. Python programmers can often guess at the\ncorrect Python command by looking at the Tk documentation. This means that in\norder to use Tkinter, you will have to know a little bit about Tk. This document\ncan\xc3\xa2\xc2\x80\xc2\x99t fulfill that role, so the best we can do is point you to the best\ndocumentation that exists. Here are some hints:\n\nThe authors strongly suggest getting a copy of the Tk man pages.\nSpecifically, the man pages in the manN directory are most useful.\nThe man3 man pages describe the C interface to the Tk library and thus\nare not especially helpful for script writers.\nAddison-Wesley publishes a book called Tcl and the Tk Toolkit by John\nOusterhout (ISBN 0-201-63337-X) which is a good introduction to Tcl and Tk for\nthe novice.  The book is not exhaustive, and for many details it defers to the\nman pages.\ntkinter/__init__.py is a last resort for most, but can be a good\nplace to go when nothing else makes sense.\n\n\n\nA Simple Hello World Program\xc3\x82\xc2\xb6\nimport tkinter as tk\n\nclass Application(tk.Frame):\n    def __init__(self, master=None):\n        super().__init__(master)\n        self.master = master\n        self.pack()\n        self.create_widgets()\n\n    def create_widgets(self):\n        self.hi_there = tk.Button(self)\n        self.hi_there["text"] = "Hello World\\n(click me)"\n        self.hi_there["command"] = self.say_hi\n        self.hi_there.pack(side="top")\n\n        self.quit = tk.Button(self, text="QUIT", fg="red",\n                              command=self.master.destroy)\n        self.quit.pack(side="bottom")\n\n    def say_hi(self):\n        print("hi there, everyone!")\n\nroot = tk.Tk()\napp = Application(master=root)\napp.mainloop()\n\n\n\n\n\nA (Very) Quick Look at Tcl/Tk\xc3\x82\xc2\xb6\nThe class hierarchy looks complicated, but in actual practice, application\nprogrammers almost always refer to the classes at the very bottom of the\nhierarchy.\nNotes:\n\nThese classes are provided for the purposes of organizing certain functions\nunder one namespace. They aren\xc3\xa2\xc2\x80\xc2\x99t meant to be instantiated independently.\nThe Tk class is meant to be instantiated only once in an application.\nApplication programmers need not instantiate one explicitly, the system creates\none whenever any of the other classes are instantiated.\nThe Widget class is not meant to be instantiated, it is meant only\nfor subclassing to make \xc3\xa2\xc2\x80\xc2\x9creal\xc3\xa2\xc2\x80\xc2\x9d widgets (in C++, this is called an \xc3\xa2\xc2\x80\xc2\x98abstract\nclass\xc3\xa2\xc2\x80\xc2\x99).\n\nTo make use of this reference material, there will be times when you will need\nto know how to read short passages of Tk and how to identify the various parts\nof a Tk command.   (See section Mapping Basic Tk into Tkinter for the\ntkinter equivalents of what\xc3\xa2\xc2\x80\xc2\x99s below.)\nTk scripts are Tcl programs.  Like all Tcl programs, Tk scripts are just lists\nof tokens separated by spaces.  A Tk widget is just its class, the options\nthat help configure it, and the actions that make it do useful things.\nTo make a widget in Tk, the command is always of the form:\nclassCommand newPathname options\n\n\n\nclassCommanddenotes which kind of widget to make (a button, a label, a menu\xc3\xa2\xc2\x80\xc2\xa6)\n\n\n\nnewPathnameis the new name for this widget.  All names in Tk must be unique.  To help\nenforce this, widgets in Tk are named with pathnames, just like files in a\nfile system.  The top level widget, the root, is called . (period) and\nchildren are delimited by more periods.  For example,\n.myApp.controlPanel.okButton might be the name of a widget.\n\noptionsconfigure the widget\xc3\xa2\xc2\x80\xc2\x99s appearance and in some cases, its behavior.  The options\ncome in the form of a list of flags and values. Flags are preceded by a \xc3\xa2\xc2\x80\xc2\x98-\xc3\xa2\xc2\x80\xc2\x98,\nlike Unix shell command flags, and values are put in quotes if they are more\nthan one word.\n\n\nFor example:\nbutton   .fred   -fg red -text "hi there"\n   ^       ^     \\______________________/\n   |       |                |\n class    new            options\ncommand  widget  (-opt val -opt val ...)\n\n\nOnce created, the pathname to the widget becomes a new command.  This new\nwidget command is the programmer\xc3\xa2\xc2\x80\xc2\x99s handle for getting the new widget to\nperform some action.  In C, you\xc3\xa2\xc2\x80\xc2\x99d express this as someAction(fred,\nsomeOptions), in C++, you would express this as fred.someAction(someOptions),\nand in Tk, you say:\n.fred someAction someOptions\n\n\nNote that the object name, .fred, starts with a dot.\nAs you\xc3\xa2\xc2\x80\xc2\x99d expect, the legal values for someAction will depend on the widget\xc3\xa2\xc2\x80\xc2\x99s\nclass: .fred disable works if fred is a button (fred gets greyed out), but\ndoes not work if fred is a label (disabling of labels is not supported in Tk).\nThe legal values of someOptions is action dependent.  Some actions, like\ndisable, require no arguments, others, like a text-entry box\xc3\xa2\xc2\x80\xc2\x99s delete\ncommand, would need arguments to specify what range of text to delete.\n\n\nMapping Basic Tk into Tkinter\xc3\x82\xc2\xb6\nClass commands in Tk correspond to class constructors in Tkinter.\nbutton .fred                =====>  fred = Button()\n\n\nThe master of an object is implicit in the new name given to it at creation\ntime.  In Tkinter, masters are specified explicitly.\nbutton .panel.fred          =====>  fred = Button(panel)\n\n\nThe configuration options in Tk are given in lists of hyphened tags followed by\nvalues.  In Tkinter, options are specified as keyword-arguments in the instance\nconstructor, and keyword-args for configure calls or as instance indices, in\ndictionary style, for established instances.  See section\nSetting Options on setting options.\nbutton .fred -fg red        =====>  fred = Button(panel, fg="red")\n.fred configure -fg red     =====>  fred["fg"] = red\n                            OR ==>  fred.config(fg="red")\n\n\nIn Tk, to perform an action on a widget, use the widget name as a command, and\nfollow it with an action name, possibly with arguments (options).  In Tkinter,\nyou call methods on the class instance to invoke actions on the widget.  The\nactions (methods) that a given widget can perform are listed in\ntkinter/__init__.py.\n.fred invoke                =====>  fred.invoke()\n\n\nTo give a widget to the packer (geometry manager), you call pack with optional\narguments.  In Tkinter, the Pack class holds all this functionality, and the\nvarious forms of the pack command are implemented as methods.  All widgets in\ntkinter are subclassed from the Packer, and so inherit all the packing\nmethods. See the tkinter.tix module documentation for additional\ninformation on the Form geometry manager.\npack .fred -side left       =====>  fred.pack(side="left")\n\n\n\n\nHow Tk and Tkinter are Related\xc3\x82\xc2\xb6\nFrom the top down:\n\nYour App Here (Python)A Python application makes a tkinter call.\n\ntkinter (Python Package)This call (say, for example, creating a button widget), is implemented in\nthe tkinter package, which is written in Python.  This Python\nfunction will parse the commands and the arguments and convert them into a\nform that makes them look as if they had come from a Tk script instead of\na Python script.\n\n_tkinter (C)These commands and their arguments will be passed to a C function in the\n_tkinter - note the underscore - extension module.\n\nTk Widgets (C and Tcl)This C function is able to make calls into other C modules, including the C\nfunctions that make up the Tk library.  Tk is implemented in C and some Tcl.\nThe Tcl part of the Tk widgets is used to bind certain default behaviors to\nwidgets, and is executed once at the point where the Python tkinter\npackage is imported. (The user never sees this stage).\n\nTk (C)The Tk part of the Tk Widgets implement the final mapping to \xc3\xa2\xc2\x80\xc2\xa6\n\nXlib (C)the Xlib library to draw graphics on the screen.\n\n\n\n\nHandy Reference\xc3\x82\xc2\xb6\n\nSetting Options\xc3\x82\xc2\xb6\nOptions control things like the color and border width of a widget. Options can\nbe set in three ways:\n\nAt object creation time, using keyword argumentsfred = Button(self, fg="red", bg="blue")\n\n\n\nAfter object creation, treating the option name like a dictionary indexfred["fg"] = "red"\nfred["bg"] = "blue"\n\n\n\nUse the config() method to update multiple attrs subsequent to object creationfred.config(fg="red", bg="blue")\n\n\n\n\nFor a complete explanation of a given option and its behavior, see the Tk man\npages for the widget in question.\nNote that the man pages list \xc3\xa2\xc2\x80\xc2\x9cSTANDARD OPTIONS\xc3\xa2\xc2\x80\xc2\x9d and \xc3\xa2\xc2\x80\xc2\x9cWIDGET SPECIFIC OPTIONS\xc3\xa2\xc2\x80\xc2\x9d\nfor each widget.  The former is a list of options that are common to many\nwidgets, the latter are the options that are idiosyncratic to that particular\nwidget.  The Standard Options are documented on the options(3) man\npage.\nNo distinction between standard and widget-specific options is made in this\ndocument.  Some options don\xc3\xa2\xc2\x80\xc2\x99t apply to some kinds of widgets. Whether a given\nwidget responds to a particular option depends on the class of the widget;\nbuttons have a command option, labels do not.\nThe options supported by a given widget are listed in that widget\xc3\xa2\xc2\x80\xc2\x99s man page, or\ncan be queried at runtime by calling the config() method without\narguments, or by calling the keys() method on that widget.  The return\nvalue of these calls is a dictionary whose key is the name of the option as a\nstring (for example, \'relief\') and whose values are 5-tuples.\nSome options, like bg are synonyms for common options with long names\n(bg is shorthand for \xc3\xa2\xc2\x80\xc2\x9cbackground\xc3\xa2\xc2\x80\xc2\x9d). Passing the config() method the name\nof a shorthand option will return a 2-tuple, not 5-tuple. The 2-tuple passed\nback will contain the name of the synonym and the \xc3\xa2\xc2\x80\xc2\x9creal\xc3\xa2\xc2\x80\xc2\x9d option (such as\n(\'bg\', \'background\')).\n\n\n\n\n\n\n\nIndex\nMeaning\nExample\n\n\n\n0\noption name\n\'relief\'\n\n1\noption name for database lookup\n\'relief\'\n\n2\noption class for database\nlookup\n\'Relief\'\n\n3\ndefault value\n\'raised\'\n\n4\ncurrent value\n\'groove\'\n\n\n\nExample:\n>>> print(fred.config())\n{\'relief\': (\'relief\', \'relief\', \'Relief\', \'raised\', \'groove\')}\n\n\nOf course, the dictionary printed will include all the options available and\ntheir values.  This is meant only as an example.\n\n\nThe Packer\xc3\x82\xc2\xb6\nThe packer is one of Tk\xc3\xa2\xc2\x80\xc2\x99s geometry-management mechanisms.    Geometry managers\nare used to specify the relative positioning of the positioning of widgets\nwithin their container - their mutual master.  In contrast to the more\ncumbersome placer (which is used less commonly, and we do not cover here), the\npacker takes qualitative relationship specification - above, to the left of,\nfilling, etc - and works everything out to determine the exact placement\ncoordinates for you.\nThe size of any master widget is determined by the size of the \xc3\xa2\xc2\x80\xc2\x9cslave widgets\xc3\xa2\xc2\x80\xc2\x9d\ninside.  The packer is used to control where slave widgets appear inside the\nmaster into which they are packed.  You can pack widgets into frames, and frames\ninto other frames, in order to achieve the kind of layout you desire.\nAdditionally, the arrangement is dynamically adjusted to accommodate incremental\nchanges to the configuration, once it is packed.\nNote that widgets do not appear until they have had their geometry specified\nwith a geometry manager.  It\xc3\xa2\xc2\x80\xc2\x99s a common early mistake to leave out the geometry\nspecification, and then be surprised when the widget is created but nothing\nappears.  A widget will appear only after it has had, for example, the packer\xc3\xa2\xc2\x80\xc2\x99s\npack() method applied to it.\nThe pack() method can be called with keyword-option/value pairs that control\nwhere the widget is to appear within its container, and how it is to behave when\nthe main application window is resized.  Here are some examples:\nfred.pack()                     # defaults to side = "top"\nfred.pack(side="left")\nfred.pack(expand=1)\n\n\n\n\nPacker Options\xc3\x82\xc2\xb6\nFor more extensive information on the packer and the options that it can take,\nsee the man pages and page 183 of John Ousterhout\xc3\xa2\xc2\x80\xc2\x99s book.\n\nanchorAnchor type.  Denotes where the packer is to place each slave in its parcel.\n\nexpandBoolean, 0 or 1.\n\nfillLegal values: \'x\', \'y\', \'both\', \'none\'.\n\nipadx and ipadyA distance - designating internal padding on each side of the slave widget.\n\npadx and padyA distance - designating external padding on each side of the slave widget.\n\nsideLegal values are: \'left\', \'right\', \'top\', \'bottom\'.\n\n\n\n\nCoupling Widget Variables\xc3\x82\xc2\xb6\nThe current-value setting of some widgets (like text entry widgets) can be\nconnected directly to application variables by using special options.  These\noptions are variable, textvariable, onvalue, offvalue, and\nvalue.  This connection works both ways: if the variable changes for any\nreason, the widget it\xc3\xa2\xc2\x80\xc2\x99s connected to will be updated to reflect the new value.\nUnfortunately, in the current implementation of tkinter it is not\npossible to hand over an arbitrary Python variable to a widget through a\nvariable or textvariable option.  The only kinds of variables for which\nthis works are variables that are subclassed from a class called Variable,\ndefined in tkinter.\nThere are many useful subclasses of Variable already defined:\nStringVar, IntVar, DoubleVar, and\nBooleanVar.  To read the current value of such a variable, call the\nget() method on it, and to change its value you call the set()\nmethod.  If you follow this protocol, the widget will always track the value of\nthe variable, with no further intervention on your part.\nFor example:\nclass App(Frame):\n    def __init__(self, master=None):\n        super().__init__(master)\n        self.pack()\n\n        self.entrythingy = Entry()\n        self.entrythingy.pack()\n\n        # here is the application variable\n        self.contents = StringVar()\n        # set it to some value\n        self.contents.set("this is a variable")\n        # tell the entry widget to watch this variable\n        self.entrythingy["textvariable"] = self.contents\n\n        # and here we get a callback when the user hits return.\n        # we will have the program print out the value of the\n        # application variable when the user hits return\n        self.entrythingy.bind(\'<Key-Return>\',\n                              self.print_contents)\n\n    def print_contents(self, event):\n        print("hi. contents of entry is now ---->",\n              self.contents.get())\n\n\n\n\nThe Window Manager\xc3\x82\xc2\xb6\nIn Tk, there is a utility command, wm, for interacting with the window\nmanager.  Options to the wm command allow you to control things like titles,\nplacement, icon bitmaps, and the like.  In tkinter, these commands have\nbeen implemented as methods on the Wm class.  Toplevel widgets are\nsubclassed from the Wm class, and so can call the Wm methods\ndirectly.\nTo get at the toplevel window that contains a given widget, you can often just\nrefer to the widget\xc3\xa2\xc2\x80\xc2\x99s master.  Of course if the widget has been packed inside of\na frame, the master won\xc3\xa2\xc2\x80\xc2\x99t represent a toplevel window.  To get at the toplevel\nwindow that contains an arbitrary widget, you can call the _root() method.\nThis method begins with an underscore to denote the fact that this function is\npart of the implementation, and not an interface to Tk functionality.\nHere are some examples of typical usage:\nimport tkinter as tk\n\nclass App(tk.Frame):\n    def __init__(self, master=None):\n        super().__init__(master)\n        self.pack()\n\n# create the application\nmyapp = App()\n\n#\n# here are method calls to the window manager class\n#\nmyapp.master.title("My Do-Nothing Application")\nmyapp.master.maxsize(1000, 400)\n\n# start the program\nmyapp.mainloop()\n\n\n\n\nTk Option Data Types\xc3\x82\xc2\xb6\n\nanchorLegal values are points of the compass: "n", "ne", "e", "se",\n"s", "sw", "w", "nw", and also "center".\n\nbitmapThere are eight built-in, named bitmaps: \'error\', \'gray25\',\n\'gray50\', \'hourglass\', \'info\', \'questhead\', \'question\',\n\'warning\'.  To specify an X bitmap filename, give the full path to the file,\npreceded with an @, as in "@/usr/contrib/bitmap/gumby.bit".\n\nbooleanYou can pass integers 0 or 1 or the strings "yes" or "no".\n\ncallbackThis is any Python function that takes no arguments.  For example:\ndef print_it():\n    print("hi there")\nfred["command"] = print_it\n\n\n\ncolorColors can be given as the names of X colors in the rgb.txt file, or as strings\nrepresenting RGB values in 4 bit: "#RGB", 8 bit: "#RRGGBB", 12 bit\xc3\xa2\xc2\x80\xc2\x9d\n"#RRRGGGBBB", or 16 bit "#RRRRGGGGBBBB" ranges, where R,G,B here\nrepresent any legal hex digit.  See page 160 of Ousterhout\xc3\xa2\xc2\x80\xc2\x99s book for details.\n\ncursorThe standard X cursor names from cursorfont.h can be used, without the\nXC_ prefix.  For example to get a hand cursor (XC_hand2), use the\nstring "hand2".  You can also specify a bitmap and mask file of your own.\nSee page 179 of Ousterhout\xc3\xa2\xc2\x80\xc2\x99s book.\n\ndistanceScreen distances can be specified in either pixels or absolute distances.\nPixels are given as numbers and absolute distances as strings, with the trailing\ncharacter denoting units: c for centimetres, i for inches, m for\nmillimetres, p for printer\xc3\xa2\xc2\x80\xc2\x99s points.  For example, 3.5 inches is expressed\nas "3.5i".\n\nfontTk uses a list font name format, such as {courier 10 bold}. Font sizes with\npositive numbers are measured in points; sizes with negative numbers are\nmeasured in pixels.\n\ngeometryThis is a string of the form widthxheight, where width and height are\nmeasured in pixels for most widgets (in characters for widgets displaying text).\nFor example: fred["geometry"] = "200x100".\n\njustifyLegal values are the strings: "left", "center", "right", and\n"fill".\n\nregionThis is a string with four space-delimited elements, each of which is a legal\ndistance (see above).  For example: "2 3 4 5" and "3i 2i 4.5i 2i" and\n"3c 2c 4c 10.43c"  are all legal regions.\n\nreliefDetermines what the border style of a widget will be.  Legal values are:\n"raised", "sunken", "flat", "groove", and "ridge".\n\nscrollcommandThis is almost always the set() method of some scrollbar widget, but can\nbe any widget method that takes a single argument.\n\nwrap:Must be one of: "none", "char", or "word".\n\n\n\n\nBindings and Events\xc3\x82\xc2\xb6\nThe bind method from the widget command allows you to watch for certain events\nand to have a callback function trigger when that event type occurs.  The form\nof the bind method is:\ndef bind(self, sequence, func, add=\'\'):\n\n\nwhere:\n\nsequenceis a string that denotes the target kind of event.  (See the bind man page and\npage 201 of John Ousterhout\xc3\xa2\xc2\x80\xc2\x99s book for details).\n\nfuncis a Python function, taking one argument, to be invoked when the event occurs.\nAn Event instance will be passed as the argument. (Functions deployed this way\nare commonly known as callbacks.)\n\naddis optional, either \'\' or \'+\'.  Passing an empty string denotes that\nthis binding is to replace any other bindings that this event is associated\nwith.  Passing a \'+\' means that this function is to be added to the list\nof functions bound to this event type.\n\n\nFor example:\ndef turn_red(self, event):\n    event.widget["activeforeground"] = "red"\n\nself.button.bind("<Enter>", self.turn_red)\n\n\nNotice how the widget field of the event is being accessed in the\nturn_red() callback.  This field contains the widget that caught the X\nevent.  The following table lists the other event fields you can access, and how\nthey are denoted in Tk, which can be useful when referring to the Tk man pages.\n\n\n\n\n\n\n\n\nTk\nTkinter Event Field\nTk\nTkinter Event Field\n\n\n\n%f\nfocus\n%A\nchar\n\n%h\nheight\n%E\nsend_event\n\n%k\nkeycode\n%K\nkeysym\n\n%s\nstate\n%N\nkeysym_num\n\n%t\ntime\n%T\ntype\n\n%w\nwidth\n%W\nwidget\n\n%x\nx\n%X\nx_root\n\n%y\ny\n%Y\ny_root\n\n\n\n\n\nThe index Parameter\xc3\x82\xc2\xb6\nA number of widgets require \xc3\xa2\xc2\x80\xc2\x9cindex\xc3\xa2\xc2\x80\xc2\x9d parameters to be passed.  These are used to\npoint at a specific place in a Text widget, or to particular characters in an\nEntry widget, or to particular menu items in a Menu widget.\n\nEntry widget indexes (index, view index, etc.)Entry widgets have options that refer to character positions in the text being\ndisplayed.  You can use these tkinter functions to access these special\npoints in text widgets:\n\nText widget indexesThe index notation for Text widgets is very rich and is best described in the Tk\nman pages.\n\nMenu indexes (menu.invoke(), menu.entryconfig(), etc.)Some options and methods for menus manipulate specific menu entries. Anytime a\nmenu index is needed for an option or a parameter, you may pass in:\n\nan integer which refers to the numeric position of the entry in the widget,\ncounted from the top, starting with 0;\nthe string "active", which refers to the menu position that is currently\nunder the cursor;\nthe string "last" which refers to the last menu item;\nAn integer preceded by @, as in @6, where the integer is interpreted\nas a y pixel coordinate in the menu\xc3\xa2\xc2\x80\xc2\x99s coordinate system;\nthe string "none", which indicates no menu entry at all, most often used\nwith menu.activate() to deactivate all entries, and finally,\na text string that is pattern matched against the label of the menu entry, as\nscanned from the top of the menu to the bottom.  Note that this index type is\nconsidered after all the others, which means that matches for menu items\nlabelled last, active, or none may be interpreted as the above\nliterals, instead.\n\n\n\n\n\nImages\xc3\x82\xc2\xb6\nImages of different formats can be created through the corresponding subclass\nof tkinter.Image:\n\nBitmapImage for images in XBM format.\nPhotoImage for images in PGM, PPM, GIF and PNG formats. The latter\nis supported starting with Tk 8.6.\n\nEither type of image is created through either the file or the data\noption (other options are available as well).\nThe image object can then be used wherever an image option is supported by\nsome widget (e.g. labels, buttons, menus). In these cases, Tk will not keep a\nreference to the image. When the last Python reference to the image object is\ndeleted, the image data is deleted as well, and Tk will display an empty box\nwherever the image was used.\n\nSee also\nThe Pillow package adds support for\nformats such as BMP, JPEG, TIFF, and WebP, among others.\n\n\n\n\nFile Handlers\xc3\x82\xc2\xb6\nTk allows you to register and unregister a callback function which will be\ncalled from the Tk mainloop when I/O is possible on a file descriptor.\nOnly one handler may be registered per file descriptor. Example code:\nimport tkinter\nwidget = tkinter.Tk()\nmask = tkinter.READABLE | tkinter.WRITABLE\nwidget.tk.createfilehandler(file, mask, callback)\n...\nwidget.tk.deletefilehandler(file)\n\n\nThis feature is not available on Windows.\nSince you don\xc3\xa2\xc2\x80\xc2\x99t know how many bytes are available for reading, you may not\nwant to use the BufferedIOBase or TextIOBase\nread() or readline() methods,\nsince these will insist on reading a predefined number of bytes.\nFor sockets, the recv() or\nrecvfrom() methods will work fine; for other files,\nuse raw reads or os.read(file.fileno(), maxbytecount).\n\n\nWidget.tk.createfilehandler(file, mask, func)\xc3\x82\xc2\xb6\nRegisters the file handler callback function func. The file argument\nmay either be an object with a fileno() method (such as\na file or socket object), or an integer file descriptor. The mask\nargument is an ORed combination of any of the three constants below.\nThe callback is called as follows:\ncallback(file, mask)\n\n\n\n\n\n\nWidget.tk.deletefilehandler(file)\xc3\x82\xc2\xb6\nUnregisters a file handler.\n\n\n\n\ntkinter.READABLE\xc3\x82\xc2\xb6\n\ntkinter.WRITABLE\xc3\x82\xc2\xb6\n\ntkinter.EXCEPTION\xc3\x82\xc2\xb6\nConstants used in the mask arguments.\n\n\n\n\n\n\n          \n        \n      \n      \n        \n  Table of Contents\n  \ntkinter \xc3\xa2\xc2\x80\xc2\x94 Python interface to Tcl/Tk\nTkinter Modules\nTkinter Life Preserver\nHow To Use This Section\nA Simple Hello World Program\n\n\nA (Very) Quick Look at Tcl/Tk\nMapping Basic Tk into Tkinter\nHow Tk and Tkinter are Related\nHandy Reference\nSetting Options\nThe Packer\nPacker Options\nCoupling Widget Variables\nThe Window Manager\nTk Option Data Types\nBindings and Events\nThe index Parameter\nImages\n\n\nFile Handlers\n\n\n\n\n  Previous topic\n  Graphical User Interfaces with Tk\n  Next topic\n  tkinter.ttk \xc3\xa2\xc2\x80\xc2\x94 Tk themed widgets\n  \n    This Page\n    \n      Report a Bug\n      \n        Show Source\n        \n      \n    \n  \n        \n      \n      \n      \n    \n      Navigation\n      \n        \n          index\n        \n          modules |\n        \n          next |\n        \n          previous |\n\n    \n    Python \xc2\xbb\n    \n\n    \n      en\n      3.8.1\n      Documentation  \xc2\xbb\n    \n\n          The Python Standard Library \xc2\xbb\n          Graphical User Interfaces with Tk \xc2\xbb\n    \n        \n\n    \n        \n          \n          \n          \n          \n        \n    \n    \n         |\n    \n\n      \n      \n    \n    \xc2\xa9 Copyright 2001-2019, Python Software Foundation.\n    \n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n    \n\n    Last updated on Dec 24, 2019.\n    Found a bug?\n    \n\n    Created using Sphinx 2.3.1.\n    \n\n  \n'